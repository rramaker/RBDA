library(RBDA)
BRCA_Counts<-read.table("~/Desktop/NPRSA/BRCA_DataSets/Size_20_seed_2_sig_1000.txt")
saveRDS(BRCA_Counts,"~/Desktop/RBDA/data/BRCA_Counts.RData")
BRCA_Counts<-read.table("~/Desktop/NPRSA/BRCA_DataSets/Size_20_seed_2_sig_1000.txt")
View(BRCA_Counts)
saveRDS(object = BRCA_Counts,file="~/Desktop/RBDA/data/BRCA_Counts.RData")
save(BRCA_Counts[,1:10],file="~/Desktop/RBDA/data/BRCA_Counts.RData")
BRCA_Counts<-BRCA_Counts[,1:10]
save(BRCA_Counts[,1:10],file="~/Desktop/RBDA/data/BRCA_Counts.RData")
save(BRCA_Counts,file="~/Desktop/RBDA/data/BRCA_Counts.RData")
library(RBDA)
data("BRCA_Counts.RData")
load("BRCA_Counts.RData")
data(BRCA_Counts.RData)
data("BRCA_Counts")
colData<-data.frame(testVariable=as.factor(c(rep(0,5),rep(1,5))), row.names=colnames(BRCA_Counts))
NPRSA_P(countData = BRCA_Counts,colData,testVariable = "testVariable", randomSeed = 1990)
RBDA(countData = BRCA_Counts,colData,testVariable = "testVariable", randomSeed = 1990)
library(RBDA)
RBDA(countData = BRCA_Counts,colData,testVariable = "testVariable", randomSeed = 1990)
library(RBDA)
library(RBDA)
library(RBDA)
data("BRCA_Counts")
head(BRCA_Counts[1:3,1:3])
tail(BRCA_Counts[1:3,1:3])
BRCA_Counts[1:3,1:3]
BRCA_Counts[1:5,1:3]
colData<-data.frame(Type=as.factor(c(rep(0,5),rep(1,5))),row.names=colnames(BRCAData))
colData<-data.frame(Type=as.factor(c(rep(0,5),rep(1,5))),row.names=colnames(BRCA_Counts))
colData
Results<- RBDA(countData = BRCA_Counts, colData=colData, testVariable = "Type", numCores=1)
library(RBDA)
Results<- RBDA(countData = BRCA_Counts, colData=colData, testVariable = "Type", numCores=1)
head(Results)
colData<-data.frame(Type=as.factor(c(rep(0,9),rep(1,0))),Batch = as.factor(rep (0,7), rep(1,3)),row.names=colnames(BRCA_Counts))
Results<- RBDA(countData = BRCA_Counts, colData=colData, testVariable = "Type",batch_family_variable = "Batch" )
Results<- RBDA(countData = BRCA_Counts, colData=colData, testVariable = "Type",batch_family_variable = "Batch" )
colData<-data.frame(Type=as.factor(c(rep(0,9),rep(1,0))),Batch = as.factor(rep (0,7), rep(1,3)),row.names=colnames(BRCA_Counts))
colData<-data.frame(Type=as.factor(c(rep(0,9),rep(1,0))),Batch = as.factor(c(rep (0,7), rep(1,3))),row.names=colnames(BRCA_Counts))
c(rep (0,7), rep(1,3))
as.factor(c(rep (0,7), rep(1,3)))
colData<-data.frame(Type=as.factor(c(rep(0,9),rep(1,0))),Batch = as.factor(c(rep (0,7), rep(1,3))),row.names=colnames(BRCA_Counts))
colData<-data.frame(Type=as.factor(c(rep(0,9),rep(1,1))),Batch = as.factor(c(rep (0,7), rep(1,3))),row.names=colnames(BRCA_Counts))
colData<-data.frame(Type=as.factor(c(rep(0,9),rep(1,1))),row.names=colnames(BRCA_Counts))
Results<- RBDA(countData = BRCA_Counts, colData=colData, testVariable = "Type")
Results<- RBDA(countData = BRCA_Counts, colData=colData, testVariable = "Type",batch_family_variable = "Batch" )
colData<-data.frame(Type=as.factor(c(rep(0,9),rep(1,1))),Batch = as.factor(c(rep (0,7), rep(1,3))),row.names=colnames(BRCA_Counts))
Results<- RBDA(countData = BRCA_Counts, colData=colData, testVariable = "Type",batch_family_variable = "Batch" )
head(Results)
output: rmarkdown::html_vignette
data("BRCA_Counts")
RBDA<-function(countData, colData, testVariable, batch_family_variable=NULL, randomSeed=1990, minP=0.000005, numCores=4){
set.seed(randomSeed)
countRanks<-apply(countData, 2, function(x) rank(-x, ties.method = "random"))
countRanks<-apply(countRanks,2,as.numeric)
countVar1<-apply(countRanks[,which(colData[,testVariable]==levels(as.factor(colData[,testVariable]))[1])],1,function(x) sum(abs(x-mean(x))^2))
if(length(which(colData[,testVariable]==levels(as.factor(colData[,testVariable]))[2]))==1){
countVar2<-0
}
if(length(which(colData[,testVariable]==levels(as.factor(colData[,testVariable]))[2]))>1){
countVar2<-apply(countRanks[,which(colData[,testVariable]==levels(as.factor(colData[,testVariable]))[2])],1,function(x) sum(abs(x-mean(x))^2))
}
totVar<-apply(countRanks,1,function(x) sum(abs(x-mean(x))^2))/(countVar1+countVar2)
totVar[which(totVar=="Inf")]<-NA
samp_func<-function(countRanks, seed){
set.seed(seed)
SampFrame<-countRanks[,sample(1:ncol(countRanks),ncol(countRanks))]
Samp_countVar1<-apply(SampFrame[,which(colData[,testVariable]==levels(as.factor(colData[,testVariable]))[1])],1,function(x) sum(abs(x-mean(x))^2))
if(length(which(colData[,testVariable]==levels(as.factor(colData[,testVariable]))[2]))==1){
Samp_countVar2<-0
}
if(length(which(colData[,testVariable]==levels(as.factor(colData[,testVariable]))[2]))>1){
Samp_countVar2<-apply(SampFrame[,which(colData[,testVariable]==levels(as.factor(colData[,testVariable]))[2])],1,function(x) sum(abs(x-mean(x))^2))
}
Samp_totVar<-apply(SampFrame,1,function(x) sum(abs(x-mean(x))^2))/(Samp_countVar1+Samp_countVar2)
Samp_totVar[which(Samp_totVar=="Inf")]<-NA
return(Samp_totVar)
}
if(!is.null(batch_family_variable)){
batch_fam_samps<-which(colData[,batch_family_variable]==levels(as.factor(colData[,batch_family_variable]))[2])
batch_fam_statistic_list<-list()
for(samp in batch_fam_samps[batch_fam_samps!=which(colData[,testVariable]==levels(as.factor(colData[,testVariable]))[2])]){
batch_fam_countVar1<-apply(countRanks[,-samp],1,function(x) sum(abs(x-mean(x))^2))
batch_fam_countVar2<-0
batch_fam_totVar<-apply(countRanks,1,function(x) sum(abs(x-mean(x))^2))/(batch_fam_countVar1+batch_fam_countVar2)
batch_fam_totVar[which(batch_fam_totVar=="Inf")]<-NA
batch_fam_statistic_list[[as.character(samp)]]<-batch_fam_totVar
}
max_batch_fam_statistic<-apply(do.call(cbind, batch_fam_statistic_list),1,max)
Samp_totVar_tot<-unlist(parallel::mclapply(1:ceiling((1/minP)/nrow(countData)), function(x) samp_func(countRanks, x),mc.cores = numCores))
batch_fam_Ps<-((rank(c(-max_batch_fam_statistic,-Samp_totVar_tot),ties.method="max")[1:length(max_batch_fam_statistic)]) - rank(-max_batch_fam_statistic,ties.method="max"))/length(Samp_totVar_tot)
Ps<-((rank(c(-totVar,-Samp_totVar_tot),ties.method="max")[1:length(totVar)]) - rank(-totVar,ties.method="max"))/length(Samp_totVar_tot)
resultFrame<-do.call(cbind,list((rank(countVar1,ties.method = "max")/length(countVar1))*100,totVar,Ps,batch_fam_Ps))
colnames(resultFrame)<-c("variance_rank", "test_statistic", "p_value","min_batch_fam_p_value")
row.names(resultFrame)<-row.names(countData)
return(resultFrame)
}
if(is.null(batch_family_variable)){
Samp_totVar_tot<-unlist(parallel::mclapply(1:ceiling((1/minP)/nrow(countData)), function(x) samp_func(countRanks, x),mc.cores = numCores))
Ps<-((rank(c(-totVar,-Samp_totVar_tot),ties.method="max")[1:length(totVar)]) - rank(-totVar,ties.method="max"))/length(Samp_totVar_tot)
resultFrame<-do.call(cbind,list((rank(countVar1,ties.method = "max")/length(countVar1))*100,totVar,Ps))
colnames(resultFrame)<-c("variance_rank", "test_statistic", "p_value")
row.names(resultFrame)<-row.names(countData)
return(resultFrame)
}
}
colData<-data.frame(testVariable=as.factor(c(rep(0,5),rep(1,5))), row.names=colnames(BRCA_Counts))
countData<-BRCA_Counts
testVariable<-"testVariable"
countRanks<-apply(countData, 2, function(x) rank(-x, ties.method = "random"))
countRanks<-apply(countRanks,2,as.numeric)
countVar_list<-lapply(1:length(levels(as.factor(colData[,testVariable]))))
1:length(levels(as.factor(colData[,testVariable])))
countVar_list<-lapply(1:length(levels(as.factor(colData[,testVariable]))), function(var) apply(countRanks[,which(colData[,var]==levels(as.factor(colData[,var]))[1])],1,function(x) sum(abs(x-mean(x))^2)))
countVar_list<-lapply(1:length(levels(as.factor(colData[,testVariable]))), function(var) apply(countRanks[,which(colData[,testVariable]==levels(as.factor(colData[,testVariable]))[var])],1,function(x) sum(abs(x-mean(x))^2)))
do.call(sum, countVar_list)
apply(sum, 1,do.call(rbind, countVar_list))
apply(do.call(rbind, countVar_list), 1, sum)
apply(do.call(rbind, countVar_list), 2, sum)
RBDA_2<-function(countData, colData, testVariable, batch_family_variable=NULL, randomSeed=1990, minP=0.000005, numCores=4){
set.seed(randomSeed)
countRanks<-apply(countData, 2, function(x) rank(-x, ties.method = "random"))
countRanks<-apply(countRanks,2,as.numeric)
if(length(which(colData[,testVariable]==levels(as.factor(colData[,testVariable]))[2]))==1){
countVar_list<-list(apply(countRanks[,which(colData[,testVariable]==levels(as.factor(colData[,testVariable]))[1])],1,function(x) sum(abs(x-mean(x))^2)),0)
}
if(length(which(colData[,testVariable]==levels(as.factor(colData[,testVariable]))[2]))>1){
countVar_list<-lapply(1:length(levels(as.factor(colData[,testVariable]))), function(var) apply(countRanks[,which(colData[,testVariable]==levels(as.factor(colData[,testVariable]))[var])],1,function(x) sum(abs(x-mean(x))^2)))
}
totVar<-apply(countRanks,1,function(x) sum(abs(x-mean(x))^2))/apply(do.call(rbind, countVar_list), 2, sum)
totVar[which(totVar=="Inf")]<-NA
samp_func<-function(countRanks, seed){
set.seed(seed)
SampFrame<-countRanks[,sample(1:ncol(countRanks),ncol(countRanks))]
Samp_countVar1<-apply(SampFrame[,which(colData[,testVariable]==levels(as.factor(colData[,testVariable]))[1])],1,function(x) sum(abs(x-mean(x))^2))
if(length(which(colData[,testVariable]==levels(as.factor(colData[,testVariable]))[2]))==1){
Samp_countVar2<-0
}
if(length(which(colData[,testVariable]==levels(as.factor(colData[,testVariable]))[2]))>1){
Samp_countVar2<-apply(SampFrame[,which(colData[,testVariable]==levels(as.factor(colData[,testVariable]))[2])],1,function(x) sum(abs(x-mean(x))^2))
}
Samp_totVar<-apply(SampFrame,1,function(x) sum(abs(x-mean(x))^2))/(Samp_countVar1+Samp_countVar2)
Samp_totVar[which(Samp_totVar=="Inf")]<-NA
return(Samp_totVar)
}
if(!is.null(batch_family_variable)){
batch_fam_samps<-which(colData[,batch_family_variable]==levels(as.factor(colData[,batch_family_variable]))[2])
batch_fam_statistic_list<-list()
for(samp in batch_fam_samps[batch_fam_samps!=which(colData[,testVariable]==levels(as.factor(colData[,testVariable]))[2])]){
batch_fam_countVar1<-apply(countRanks[,-samp],1,function(x) sum(abs(x-mean(x))^2))
batch_fam_countVar2<-0
batch_fam_totVar<-apply(countRanks,1,function(x) sum(abs(x-mean(x))^2))/(batch_fam_countVar1+batch_fam_countVar2)
batch_fam_totVar[which(batch_fam_totVar=="Inf")]<-NA
batch_fam_statistic_list[[as.character(samp)]]<-batch_fam_totVar
}
max_batch_fam_statistic<-apply(do.call(cbind, batch_fam_statistic_list),1,max)
Samp_totVar_tot<-unlist(parallel::mclapply(1:ceiling((1/minP)/nrow(countData)), function(x) samp_func(countRanks, x),mc.cores = numCores))
batch_fam_Ps<-((rank(c(-max_batch_fam_statistic,-Samp_totVar_tot),ties.method="max")[1:length(max_batch_fam_statistic)]) - rank(-max_batch_fam_statistic,ties.method="max"))/length(Samp_totVar_tot)
Ps<-((rank(c(-totVar,-Samp_totVar_tot),ties.method="max")[1:length(totVar)]) - rank(-totVar,ties.method="max"))/length(Samp_totVar_tot)
resultFrame<-do.call(cbind,list((rank(countVar1,ties.method = "max")/length(countVar1))*100,totVar,Ps,batch_fam_Ps))
colnames(resultFrame)<-c("variance_rank", "test_statistic", "p_value","min_batch_fam_p_value")
row.names(resultFrame)<-row.names(countData)
return(resultFrame)
}
if(is.null(batch_family_variable)){
Samp_totVar_tot<-unlist(parallel::mclapply(1:ceiling((1/minP)/nrow(countData)), function(x) samp_func(countRanks, x),mc.cores = numCores))
Ps<-((rank(c(-totVar,-Samp_totVar_tot),ties.method="max")[1:length(totVar)]) - rank(-totVar,ties.method="max"))/length(Samp_totVar_tot)
resultFrame<-do.call(cbind,list((rank(countVar1,ties.method = "max")/length(countVar1))*100,totVar,Ps))
colnames(resultFrame)<-c("variance_rank", "test_statistic", "p_value")
row.names(resultFrame)<-row.names(countData)
return(resultFrame)
}
}
rm(countData)
rm(countRanks)
rm(testVariable)
rm (countVar_list)
Res<-RBDA(countData = BRCA_Counts,colData,testVariable = "testVariable", randomSeed = 1990)
Res2<-RBDA2(countData = BRCA_Counts,colData,testVariable = "testVariable", randomSeed = 1990)
Res2<-RBDA_2(countData = BRCA_Counts,colData,testVariable = "testVariable", randomSeed = 1990)
tqble(colData[,1])
table(colData[,1])
max(table(colData[,1]))
which.max(table(colData[,1]))
RBDA_2<-function(countData, colData, testVariable, batch_family_variable=NULL, randomSeed=1990, minP=0.000005, numCores=4){
set.seed(randomSeed)
countRanks<-apply(countData, 2, function(x) rank(-x, ties.method = "random"))
countRanks<-apply(countRanks,2,as.numeric)
if(length(which(colData[,testVariable]==levels(as.factor(colData[,testVariable]))[2]))==1){
countVar_list<-list(apply(countRanks[,which(colData[,testVariable]==levels(as.factor(colData[,testVariable]))[1])],1,function(x) sum(abs(x-mean(x))^2)),0)
}
if(length(which(colData[,testVariable]==levels(as.factor(colData[,testVariable]))[2]))>1){
countVar_list<-lapply(1:length(levels(as.factor(colData[,testVariable]))), function(var) apply(countRanks[,which(colData[,testVariable]==levels(as.factor(colData[,testVariable]))[var])],1,function(x) sum(abs(x-mean(x))^2)))
}
totVar<-apply(countRanks,1,function(x) sum(abs(x-mean(x))^2))/apply(do.call(rbind, countVar_list), 2, sum)
totVar[which(totVar=="Inf")]<-NA
samp_func<-function(countRanks, seed){
set.seed(seed)
SampFrame<-countRanks[,sample(1:ncol(countRanks),ncol(countRanks))]
Samp_countVar1<-apply(SampFrame[,which(colData[,testVariable]==levels(as.factor(colData[,testVariable]))[1])],1,function(x) sum(abs(x-mean(x))^2))
if(length(which(colData[,testVariable]==levels(as.factor(colData[,testVariable]))[2]))==1){
Samp_countVar2<-0
}
if(length(which(colData[,testVariable]==levels(as.factor(colData[,testVariable]))[2]))>1){
Samp_countVar2<-apply(SampFrame[,which(colData[,testVariable]==levels(as.factor(colData[,testVariable]))[2])],1,function(x) sum(abs(x-mean(x))^2))
}
Samp_totVar<-apply(SampFrame,1,function(x) sum(abs(x-mean(x))^2))/(Samp_countVar1+Samp_countVar2)
Samp_totVar[which(Samp_totVar=="Inf")]<-NA
return(Samp_totVar)
}
if(!is.null(batch_family_variable)){
batch_fam_samps<-which(colData[,batch_family_variable]==levels(as.factor(colData[,batch_family_variable]))[2])
batch_fam_statistic_list<-list()
for(samp in batch_fam_samps[batch_fam_samps!=which(colData[,testVariable]==levels(as.factor(colData[,testVariable]))[2])]){
batch_fam_countVar1<-apply(countRanks[,-samp],1,function(x) sum(abs(x-mean(x))^2))
batch_fam_countVar2<-0
batch_fam_totVar<-apply(countRanks,1,function(x) sum(abs(x-mean(x))^2))/(batch_fam_countVar1+batch_fam_countVar2)
batch_fam_totVar[which(batch_fam_totVar=="Inf")]<-NA
batch_fam_statistic_list[[as.character(samp)]]<-batch_fam_totVar
}
max_batch_fam_statistic<-apply(do.call(cbind, batch_fam_statistic_list),1,max)
Samp_totVar_tot<-unlist(parallel::mclapply(1:ceiling((1/minP)/nrow(countData)), function(x) samp_func(countRanks, x),mc.cores = numCores))
batch_fam_Ps<-((rank(c(-max_batch_fam_statistic,-Samp_totVar_tot),ties.method="max")[1:length(max_batch_fam_statistic)]) - rank(-max_batch_fam_statistic,ties.method="max"))/length(Samp_totVar_tot)
Ps<-((rank(c(-totVar,-Samp_totVar_tot),ties.method="max")[1:length(totVar)]) - rank(-totVar,ties.method="max"))/length(Samp_totVar_tot)
resultFrame<-do.call(cbind,list((rank(countVar_list[[which.max(table(colData[,1]))]],ties.method = "max")/length(countVar_list[[which.max(table(colData[,1]))]]))*100,totVar,Ps,batch_fam_Ps))
colnames(resultFrame)<-c("variance_rank", "test_statistic", "p_value","min_batch_fam_p_value")
row.names(resultFrame)<-row.names(countData)
return(resultFrame)
}
if(is.null(batch_family_variable)){
Samp_totVar_tot<-unlist(parallel::mclapply(1:ceiling((1/minP)/nrow(countData)), function(x) samp_func(countRanks, x),mc.cores = numCores))
Ps<-((rank(c(-totVar,-Samp_totVar_tot),ties.method="max")[1:length(totVar)]) - rank(-totVar,ties.method="max"))/length(Samp_totVar_tot)
resultFrame<-do.call(cbind,list((rank(countVar_list[[which.max(table(colData[,1]))]],ties.method = "max")/length(countVar_list[[which.max(table(colData[,1]))]]))*100,totVar,Ps))
colnames(resultFrame)<-c("variance_rank", "test_statistic", "p_value")
row.names(resultFrame)<-row.names(countData)
return(resultFrame)
}
}
Res2<-RBDA_2(countData = BRCA_Counts,colData,testVariable = "testVariable", randomSeed = 1990)
Res==Res2
colData<-data.frame(testVariable=as.factor(c(rep(0,3),rep(1,3),rep(2,4))), row.names=colnames(BRCA_Counts))
Res2<-RBDA_2(countData = BRCA_Counts,colData,testVariable = "testVariable", randomSeed = 1990)
z<-lapply(1:ncol(BRCA_Counts), function(x) BRCA_Counts-x)
lapply(1:ncol(BRCA_Counts), function(x) sum(abs(BRCA_Counts[,1]-x)))
lapply(1:ncol(BRCA_Counts), function(x) sum(abs(BRCA_Counts[,1]-BRCA_Counts[,x])))
z<-lapply(1:ncol(BRCA_Counts), function(y) unlist(lapply(1:ncol(BRCA_Counts), function(x) BRCA_Counts[,y]-BRCA_Counts[,x])))
z<-do.call(rbind,lapply(1:ncol(BRCA_Counts), function(y) unlist(lapply(1:ncol(BRCA_Counts), function(x) BRCA_Counts[,y]-BRCA_Counts[,x]))))
View(z)
a<-lapply(1:ncol(BRCA_Counts), function(y) unlist(lapply(1:ncol(BRCA_Counts), function(x) BRCA_Counts[,y]-BRCA_Counts[,x])))
a[[1]]
a<-BRCA_Counts-BRCA_Counts[,x]
a<-BRCA_Counts-BRCA_Counts[,1]
View(a)
a<-apply(BRCA_Counts-BRCA_Counts[,1],1,function(x) sum(abs(x)))
a<-apply(BRCA_Counts-BRCA_Counts[,1],2,function(x) sum(abs(x)))
lapply(1:ncol(BRCA_Counts), function(y) apply(BRCA_Counts-BRCA_Counts[,y],2,function(x) sum(abs(x))))
do.call(rbind,lapply(1:ncol(BRCA_Counts), function(y) apply(BRCA_Counts-BRCA_Counts[,y],2,function(x) sum(abs(x)))))
z<-do.call(rbind,lapply(1:ncol(BRCA_Counts), function(y) apply(BRCA_Counts-BRCA_Counts[,y],2,function(x) sum(abs(x)))))
View(z)
hclust(z)
hclust(z/max(z))
z/max(z)
countRanks<-apply(BRCA_Counts, 2, function(x) rank(-x, ties.method = "random"))
countRanks<-apply(countRanks,2,as.numeric)
apply(countRanks,1,var)
y=1
cor(countRanks, countRanks[,y],method="spearman")
z<-do.call(rbind,lapply(1:ncol(countRanks), function(y) cor(countRanks, countRanks[,y],method="spearman")))
View(z)
z<-do.call(cbind,lapply(1:ncol(countRanks), function(y) cor(countRanks, countRanks[,y],method="spearman")))
View(z)
BRCAData<-read.table("~/Desktop/Finished_Projects/MetaPCNA/BRCA/BRCA_FullCounts.csv",sep=",",header=T,row.names=1)
countRanks<-apply(BRCAData[,1:50], 2, function(x) rank(-x, ties.method = "random"))
countRanks<-apply(countRanks,2,as.numeric)
z<-do.call(cbind,mclapply(1:ncol(countRanks), function(y) cor(countRanks, countRanks[,y],method="spearman"), mc.cores=4))
library(parallel)
z<-do.call(cbind,mclapply(1:ncol(countRanks), function(y) cor(countRanks, countRanks[,y],method="spearman"), mc.cores=4))
countRanks<-apply(BRCAData[,1:100], 2, function(x) rank(-x, ties.method = "random"))
countRanks<-apply(countRanks,2,as.numeric)
z<-do.call(cbind,mclapply(1:ncol(countRanks), function(y) cor(countRanks, countRanks[,y],method="spearman"), mc.cores=4))
sum(apply(BRCAData,1,min)>5)
sum(apply(BRCAData,1,min)>9)
sum(BRCAData[,1]==0)
sum(BRCAData[,1]==1)
sum(BRCAData[,1]==2)
sum(BRCAData[,1]==3)
sum(BRCAData[,1]==4)
sum(BRCAData[,1]==5)
sum(BRCAData[,1]==6)
sum(BRCAData[,1]==7)
sum(BRCAData[,1]==8)
sum(BRCAData[,1]==9)
sum(BRCAData[,1]==10)
lapply(1:100, function(x) sum(BRCA[,1]==x))
lapply(1:100, function(x) sum(BRCAData[,1]==x))
plot(lapply(1:100, function(x) sum(BRCAData[,1]==x)))
plot(unlist(lapply(1:100, function(x) sum(BRCAData[,1]==x))))
z<-do.call(cbind,mclapply(1:ncol(countRanks), function(y) cor(countRanks[which(apply(BRCAData,1,min)>9),], countRanks[which(apply(BRCAData,1,min)>9),y],method="spearman"), mc.cores=4))
countRanks<-apply(BRCAData[which(apply(BRCAData,1,min)>9),1:100], 2, function(x) rank(-x, ties.method = "random"))
countRanks<-apply(countRanks,2,as.numeric)
z<-do.call(cbind,mclapply(1:ncol(countRanks), function(y) cor(countRanks, countRanks[,y],method="spearman"), mc.cores=4))
countRanks<-apply(BRCAData[which(apply(BRCAData,1,min)>9),], 2, function(x) rank(-x, ties.method = "random"))
countRanks<-apply(countRanks,2,as.numeric)
z<-do.call(cbind,mclapply(1:ncol(countRanks), function(y) cor(countRanks, countRanks[,y],method="spearman"), mc.cores=4))
