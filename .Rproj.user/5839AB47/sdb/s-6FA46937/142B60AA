{
    "contents" : "#' Rank Based Differential Expression Analysis\n#' This function identifies differentially expressed genes from a raw count table\n#' @param countData A raw count table (dataframe or matrix) with samples as columns and genes as rows.\n#' @param colData A dataframe with samples as rows and columns factor variables indicating experimental groups.\n#' @param testVariable Character indicating the column name in colData that reresents the variable of interest for differential expression analysis.\n#' @param batch_family_variable This paramater is used in N=1 cases only. Character that specifies a column name in colData that indicates other samples sequenced in the same batch as the sample of interest or related family members. It can be used as a downstream filter when comparing one sample to a large reference set. Defaults to NULL.\n#' @param randomSeed A numeric indicating a random seed for reproducible analysis. Defaults to 1990\n#' @param minP A numeric between 0 and one indicating the minimum possible P-value computed via random sampling from the countTable. The larger this number is the faster the compute time will be. Defaults to 0.000005.\n#' @param numCores A numeric indicating the number of cores used for computing. Most laptops can readily handle up to 4. Defaults to 4.\n#' @return Returns a data frame containing differential expression results. The first column, \"variance_rank,\" indicates the percentile rank of a gene's rank variance. Low numbers indicate a gene exhibits very low variance across samples. The second column \"test_statistic\" is the RBDA test statistic. The third column \"p_value\" indicates the probability of observing the test statistic by chance alone. A fourth column, \"min_batch_fam_p_value,\" will only result if the batch_family_variable parameter is specified and will provide the minimum p-value computed for any samples indicated by this factor variable in colData.\n#' @export\n#' @import parallel\n#' @examples\n#'data(\"BRCA_Counts\")\n#'colData<-data.frame(testVariable=as.factor(c(rep(0,5),rep(1,5))), row.names=colnames(BRCA_Counts))\n#'RBDA(countData = BRCA_Counts,colData,testVariable = \"testVariable\", randomSeed = 1990, numCores=1)\n\n\nRBDA<-function(countData, colData, testVariable, batch_family_variable=NULL, randomSeed=1990, minP=0.000005, numCores=4){\n  set.seed(randomSeed)\n  countRanks<-apply(countData, 2, function(x) rank(-x, ties.method = \"random\"))\n  countRanks<-apply(countRanks,2,as.numeric)\n  countVar1<-apply(countRanks[,which(colData[,testVariable]==levels(as.factor(colData[,testVariable]))[1])],1,function(x) sum(abs(x-mean(x))^2))\n  if(length(which(colData[,testVariable]==levels(as.factor(colData[,testVariable]))[2]))==1){\n    countVar2<-0\n  }\n  if(length(which(colData[,testVariable]==levels(as.factor(colData[,testVariable]))[2]))>1){\n    countVar2<-apply(countRanks[,which(colData[,testVariable]==levels(as.factor(colData[,testVariable]))[2])],1,function(x) sum(abs(x-mean(x))^2))\n  }\n  totVar<-apply(countRanks,1,function(x) sum(abs(x-mean(x))^2))/(countVar1+countVar2)\n  totVar[which(totVar==\"Inf\")]<-NA\n\n  samp_func<-function(countRanks, seed){\n    set.seed(seed)\n    SampFrame<-countRanks[,sample(1:ncol(countRanks),ncol(countRanks))]\n    Samp_countVar1<-apply(SampFrame[,which(colData[,testVariable]==levels(as.factor(colData[,testVariable]))[1])],1,function(x) sum(abs(x-mean(x))^2))\n    if(length(which(colData[,testVariable]==levels(as.factor(colData[,testVariable]))[2]))==1){\n      Samp_countVar2<-0\n    }\n    if(length(which(colData[,testVariable]==levels(as.factor(colData[,testVariable]))[2]))>1){\n      Samp_countVar2<-apply(SampFrame[,which(colData[,testVariable]==levels(as.factor(colData[,testVariable]))[2])],1,function(x) sum(abs(x-mean(x))^2))\n    }\n    Samp_totVar<-apply(SampFrame,1,function(x) sum(abs(x-mean(x))^2))/(Samp_countVar1+Samp_countVar2)\n    Samp_totVar[which(Samp_totVar==\"Inf\")]<-NA\n    return(Samp_totVar)\n  }\n\n  if(!is.null(batch_family_variable)){\n    batch_fam_samps<-which(colData[,batch_family_variable]==levels(as.factor(colData[,batch_family_variable]))[2])\n    batch_fam_statistic_list<-list()\n    for(samp in batch_fam_samps[batch_fam_samps!=which(colData[,testVariable]==levels(as.factor(colData[,testVariable]))[2])]){\n      batch_fam_countVar1<-apply(countRanks[,-samp],1,function(x) sum(abs(x-mean(x))^2))\n      batch_fam_countVar2<-0\n      batch_fam_totVar<-apply(countRanks,1,function(x) sum(abs(x-mean(x))^2))/(batch_fam_countVar1+batch_fam_countVar2)\n      batch_fam_totVar[which(batch_fam_totVar==\"Inf\")]<-NA\n      batch_fam_statistic_list[[as.character(samp)]]<-batch_fam_totVar\n    }\n    max_batch_fam_statistic<-apply(do.call(cbind, batch_fam_statistic_list),1,max)\n    Samp_totVar_tot<-unlist(parallel::mclapply(1:ceiling((1/minP)/nrow(countData)), function(x) samp_func(countRanks, x),mc.cores = numCores))\n    batch_fam_Ps<-((rank(c(-max_batch_fam_statistic,-Samp_totVar_tot),ties.method=\"max\")[1:length(max_batch_fam_statistic)]) - rank(-max_batch_fam_statistic,ties.method=\"max\"))/length(Samp_totVar_tot)\n    Ps<-((rank(c(-totVar,-Samp_totVar_tot),ties.method=\"max\")[1:length(totVar)]) - rank(-totVar,ties.method=\"max\"))/length(Samp_totVar_tot)\n    resultFrame<-do.call(cbind,list((rank(countVar1,ties.method = \"max\")/length(countVar1))*100,totVar,Ps,batch_fam_Ps))\n    colnames(resultFrame)<-c(\"variance_rank\", \"test_statistic\", \"p_value\",\"min_batch_fam_p_value\")\n    row.names(resultFrame)<-row.names(countData)\n    return(resultFrame)\n  }\n\n  if(is.null(batch_family_variable)){\n    Samp_totVar_tot<-unlist(parallel::mclapply(1:ceiling((1/minP)/nrow(countData)), function(x) samp_func(countRanks, x),mc.cores = numCores))\n    Ps<-((rank(c(-totVar,-Samp_totVar_tot),ties.method=\"max\")[1:length(totVar)]) - rank(-totVar,ties.method=\"max\"))/length(Samp_totVar_tot)\n    resultFrame<-do.call(cbind,list((rank(countVar1,ties.method = \"max\")/length(countVar1))*100,totVar,Ps))\n    colnames(resultFrame)<-c(\"variance_rank\", \"test_statistic\", \"p_value\")\n    row.names(resultFrame)<-row.names(countData)\n    return(resultFrame)\n  }\n}\n",
    "created" : 1569851908749.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1242062243",
    "id" : "142B60AA",
    "lastKnownWriteTime" : 1569856365,
    "path" : "~/Desktop/RBDA/R/RBDA.R",
    "project_path" : "R/RBDA.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "type" : "r_source"
}