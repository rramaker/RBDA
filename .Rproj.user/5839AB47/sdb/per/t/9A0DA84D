{
    "contents" : "####\nlibrary(parallel)\nBRCAData<-read.table(\"~/Desktop/Finished_Projects/MetaPCNA/BRCA/BRCA_FullCounts.csv\",sep=\",\",header=T,row.names=1)\nBRCAtreatment<-as.factor(c(rep(1,519),rep(2,519)))\ncolData<-data.frame(x=as.factor(c(rep(0,519),rep(1,519))), row.names=colnames(BRCAData))\n\nNPRSA_P<-function(countData, colData, testVariable, batch_family_variable=NULL, penalty=2, randomSeed=1990, minP=0.000005, numCores=4){\n  set.seed(randomSeed)\n  countRanks<-apply(countData, 2, function(x) rank(-x, ties.method = \"random\"))\n  countRanks<-apply(countRanks,2,as.numeric)\n  countVar1<-apply(countRanks[,which(colData[,testVariable]==levels(as.factor(colData[,testVariable]))[1])],1,function(x) sum(abs(x-mean(x))^penalty))\n  if(length(which(colData[,testVariable]==levels(as.factor(colData[,testVariable]))[2]))==1){\n    countVar2<-0\n  }\n  if(length(which(colData[,testVariable]==levels(as.factor(colData[,testVariable]))[2]))>1){\n    countVar2<-apply(countRanks[,which(colData[,testVariable]==levels(as.factor(colData[,testVariable]))[2])],1,function(x) sum(abs(x-mean(x))^penalty))\n  }\n  totVar<-apply(countRanks,1,function(x) sum(abs(x-mean(x))^2))/(countVar1+countVar2)\n  totVar[which(totVar==\"Inf\")]<-NA\n  \n  samp_func<-function(countRanks, seed){\n    set.seed(seed)\n    SampFrame<-countRanks[,sample(1:ncol(countRanks),ncol(countRanks))]\n    Samp_countVar1<-apply(SampFrame[,which(colData[,testVariable]==levels(as.factor(colData[,testVariable]))[1])],1,function(x) sum(abs(x-mean(x))^penalty))\n    if(length(which(colData[,testVariable]==levels(as.factor(colData[,testVariable]))[2]))==1){\n      Samp_countVar2<-0\n    }\n    if(length(which(colData[,testVariable]==levels(as.factor(colData[,testVariable]))[2]))>1){\n      Samp_countVar2<-apply(SampFrame[,which(colData[,testVariable]==levels(as.factor(colData[,testVariable]))[2])],1,function(x) sum(abs(x-mean(x))^penalty))\n    }\n    Samp_totVar<-apply(SampFrame,1,function(x) sum(abs(x-mean(x))^2))/(Samp_countVar1+Samp_countVar2)\n    Samp_totVar[which(Samp_totVar==\"Inf\")]<-NA\n    return(Samp_totVar)\n  }\n  \n  if(!is.null(batch_family_variable)){\n    batch_fam_samps<-which(colData[,batch_family_variable]==levels(as.factor(colData[,batch_family_variable]))[2])\n    batch_fam_statistic_list<-list()\n    for(samp in batch_fam_samps[batch_fam_samps!=which(colData[,testVariable]==levels(as.factor(colData[,testVariable]))[2])]){\n      batch_fam_countVar1<-apply(countRanks[,-samp],1,function(x) sum(abs(x-mean(x))^penalty))\n      batch_fam_countVar2<-0\n      batch_fam_totVar<-apply(countRanks,1,function(x) sum(abs(x-mean(x))^2))/(batch_fam_countVar1+batch_fam_countVar2)\n      batch_fam_totVar[which(batch_fam_totVar==\"Inf\")]<-NA\n      batch_fam_statistic_list[[as.character(samp)]]<-batch_fam_totVar\n    }\n    max_batch_fam_statistic<-apply(do.call(cbind, batch_fam_statistic_list),1,max)\n    Samp_totVar_tot<-unlist(mclapply(1:ceiling((1/minP)/nrow(countData)), function(x) samp_func(countRanks, x),mc.cores = numCores))\n    batch_fam_Ps<-((rank(c(-max_batch_fam_statistic,-Samp_totVar_tot),ties.method=\"max\")[1:length(max_batch_fam_statistic)]) - rank(-max_batch_fam_statistic,ties.method=\"max\"))/length(Samp_totVar_tot)\n    Ps<-((rank(c(-totVar,-Samp_totVar_tot),ties.method=\"max\")[1:length(totVar)]) - rank(-totVar,ties.method=\"max\"))/length(Samp_totVar_tot)\n    resultFrame<-do.call(cbind,list((rank(countVar1,ties.method = \"max\")/length(countVar1))*100,totVar,Ps,batch_fam_Ps))\n    colnames(resultFrame)<-c(\"variance_rank\", \"test_statistic\", \"p_value\",\"min_batch_fam_p_value\")\n    row.names(resultFrame)<-row.names(countData)\n    return(resultFrame)\n  }\n  \n  if(is.null(batch_family_variable)){\n    Samp_totVar_tot<-unlist(mclapply(1:ceiling((1/minP)/nrow(countData)), function(x) samp_func(countRanks, x),mc.cores = numCores))\n    Ps<-((rank(c(-totVar,-Samp_totVar_tot),ties.method=\"max\")[1:length(totVar)]) - rank(-totVar,ties.method=\"max\"))/length(Samp_totVar_tot)\n    resultFrame<-do.call(cbind,list((rank(countVar1,ties.method = \"max\")/length(countVar1))*100,totVar,Ps))\n    colnames(resultFrame)<-c(\"variance_rank\", \"test_statistic\", \"p_value\")\n    row.names(resultFrame)<-row.names(countData)\n    return(resultFrame)\n  }\n}\n\nsizes<-c(20,50,100,250)\nBRCA_ROC_Frame<-matrix(nrow = 10,ncol = 4)\nBRCA_PRC_Frame<-matrix(nrow = 10,ncol = 4)\n\nfor(size in sizes){\n  print(size)\n  for(seed in 1:10){\n  print(seed)\n  set.seed(seed)\n  data.sim <- SimData(counts = BRCAData, treatment = BRCAtreatment,\n                      sort.method = \"unpaired\", k.ind = size, n.genes = 5000, n.diff = 1000)\n  SimCounts<-data.sim$counts\n  write.table(SimCounts, paste0(\"~/Desktop/NPRSA/BRCA_DataSets/Size_\",size,\"_seed_\",seed,\"_sig_1000.txt\"),sep=\"\\t\",quote=F)\n  colData<-data.frame(x=as.factor(c(rep(0,size),rep(1,size))), row.names=colnames(SimCounts))\n  library(PRROC)\n    totVar<-NPRSA(SimCounts, colData, \"x\", penalty=2)\n    totVar[which(is.na(totVar))]<-mean(totVar,na.rm=T)\n    BRCA_ROC_Frame[seed,grep(paste0(\"^\",size,\"$\"),sizes)]<-roc.curve(scores.class0=totVar[which(data.sim$DE.ind==TRUE)], scores.class1=totVar[which(data.sim$DE.ind==FALSE)])[[2]]\n    BRCA_PRC_Frame[seed,grep(paste0(\"^\",size,\"$\"),sizes)]<-pr.curve(scores.class0=totVar[which(data.sim$DE.ind==TRUE)], scores.class1=totVar[which(data.sim$DE.ind==FALSE)])[[2]]\n  }\n}\n\n\nBRCA_ROC_Frame_100sig<-matrix(nrow = 10,ncol = 4)\nBRCA_PRC_Frame_100sig<-matrix(nrow = 10,ncol = 4)\nfor(size in sizes){\n  print(size)\n  for(seed in 1:10){\n    print(seed)\n    set.seed(seed)\n    data.sim <- SimData(counts = BRCAData, treatment = BRCAtreatment,\n                        sort.method = \"unpaired\", k.ind = size, n.genes = 5000, n.diff = 100)\n    SimCounts<-data.sim$counts\n    write.table(SimCounts, paste0(\"~/Desktop/NPRSA/BRCA_DataSets/Size_\",size,\"_seed_\",seed,\"_sig_100.txt\"),sep=\"\\t\",quote=F)\n    colData<-data.frame(x=as.factor(c(rep(0,size),rep(1,size))), row.names=colnames(SimCounts))\n    library(PRROC)\n    totVar<-NPRSA(SimCounts, colData, \"x\", penalty=2)\n    totVar[which(is.na(totVar))]<-mean(totVar,na.rm=T)\n    BRCA_ROC_Frame_100sig[seed,grep(paste0(\"^\",size,\"$\"),sizes)]<-roc.curve(scores.class0=totVar[which(data.sim$DE.ind==TRUE)], scores.class1=totVar[which(data.sim$DE.ind==FALSE)])[[2]]\n    BRCA_PRC_Frame_100sig[seed,grep(paste0(\"^\",size,\"$\"),sizes)]<-pr.curve(scores.class0=totVar[which(data.sim$DE.ind==TRUE)], scores.class1=totVar[which(data.sim$DE.ind==FALSE)])[[2]]\n  }\n}\n\nBRCA_ROC_Frame_10sig<-matrix(nrow = 10,ncol = 4)\nBRCA_PRC_Frame_10sig<-matrix(nrow = 10,ncol = 4)\nfor(size in sizes){\n  print(size)\n  for(seed in 1:10){\n    print(seed)\n    set.seed(seed)\n    data.sim <- SimData(counts = BRCAData, treatment = BRCAtreatment,\n                        sort.method = \"unpaired\", k.ind = size, n.genes = 5000, n.diff = 10)\n    SimCounts<-data.sim$counts\n    write.table(SimCounts, paste0(\"~/Desktop/NPRSA/BRCA_DataSets/Size_\",size,\"_seed_\",seed,\"_sig_10.txt\"),sep=\"\\t\",quote=F)\n    colData<-data.frame(x=as.factor(c(rep(0,size),rep(1,size))), row.names=colnames(SimCounts))\n    library(PRROC)\n    totVar<-NPRSA(SimCounts, colData, \"x\", penalty=2)\n    totVar[which(is.na(totVar))]<-mean(totVar,na.rm=T)\n    BRCA_ROC_Frame_10sig[seed,grep(paste0(\"^\",size,\"$\"),sizes)]<-roc.curve(scores.class0=totVar[which(data.sim$DE.ind==TRUE)], scores.class1=totVar[which(data.sim$DE.ind==FALSE)])[[2]]\n    BRCA_PRC_Frame_10sig[seed,grep(paste0(\"^\",size,\"$\"),sizes)]<-pr.curve(scores.class0=totVar[which(data.sim$DE.ind==TRUE)], scores.class1=totVar[which(data.sim$DE.ind==FALSE)])[[2]]\n  }\n}\n\npar(mfrow=c(1,3))\nboxplot(BRCA_ROC_Frame_10sig, ylim=c(0.35,.80))\nboxplot(BRCA_ROC_Frame_100sig, ylim=c(0.35,.80))\nboxplot(BRCA_ROC_Frame, ylim=c(0.35,.80))\n\nboxplot(BRCA_PRC_Frame_10sig, ylim=c(0,0.50))\nboxplot(BRCA_PRC_Frame_100sig, ylim=c(0,0.50))\nboxplot(BRCA_PRC_Frame, ylim=c(0,0.50))\nwrite.table(BRCA_ROC_Frame_10sig,\"~/Desktop/NPRSA/BRCA_DataSets/BRCA_ROC_Frame_10sig.txt\",sep=\"\\t\",quote=F,col.names=F,row.names=F)\nwrite.table(BRCA_ROC_Frame_100sig,\"~/Desktop/NPRSA/BRCA_DataSets/BRCA_ROC_Frame_100sig.txt\",sep=\"\\t\",quote=F,col.names=F,row.names=F)\nwrite.table(BRCA_ROC_Frame,\"~/Desktop/NPRSA/BRCA_DataSets/BRCA_ROC_Frame_1000sig.txt\",sep=\"\\t\",quote=F,col.names=F,row.names=F)\nwrite.table(BRCA_PRC_Frame_10sig,\"~/Desktop/NPRSA/BRCA_DataSets/BRCA_PRC_Frame_10sig.txt\",sep=\"\\t\",quote=F,col.names=F,row.names=F)\nwrite.table(BRCA_PRC_Frame_100sig,\"~/Desktop/NPRSA/BRCA_DataSets/BRCA_PRC_Frame_100sig.txt\",sep=\"\\t\",quote=F,col.names=F,row.names=F)\nwrite.table(BRCA_PRC_Frame,\"~/Desktop/NPRSA/BRCA_DataSets/BRCA_PRC_Frame_1000sig.txt\",sep=\"\\t\",quote=F,col.names=F,row.names=F)\n\n###########################################################################################################################\notherFrame_n20<-matrix(nrow=14, ncol=10)\notherFrame_n50<-matrix(nrow=14, ncol=10)\notherFrame_n100<-matrix(nrow=14, ncol=10)\notherFrame_n250<-matrix(nrow=14, ncol=10)\notherFrame_List<-list(otherFrame_n20,otherFrame_n50,otherFrame_n100,otherFrame_n250)\nNPRSA_Preds<-list(c(),c(),c(),c(),c())\nDESeq2_Preds<-list(c(),c(),c(),c(),c())\nEdgeR_Preds<-list(c(),c(),c(),c(),c())\nNoiseq_Preds<-list(c(),c(),c(),c(),c())\nBionoiseq_Preds<-list(c(),c(),c(),c(),c())\nL2FC_Preds<-list(c(),c(),c(),c(),c())\nSAMseq_Preds<-list(c(),c(),c(),c(),c())\nTrue_Preds<-list(c(),c(),c(),c(),c())\nGene_List<-list(c(),c(),c(),c(),c())\nlibrary(PRROC)\nsizes=c(20,50,100,250)\nnsig=100\nfor(size in sizes){\n  for(seed in 1:10){\n    print(seed)\n    set.seed(seed)\n    data.sim <- SimData(counts = BRCAData, treatment = BRCAtreatment,\n                        sort.method = \"unpaired\", k.ind = size, n.genes = 5000, n.diff = nsig)\n    SimCounts<-data.sim$counts\n    colData<-data.frame(x=as.factor(c(rep(0,size),rep(1,size))), row.names=colnames(SimCounts))\n    Gene_List[[grep(paste0(\"^\",size,\"$\"),sizes)]][seed]<-list(data.sim$genes.subset)\n    True_Preds[[grep(paste0(\"^\",size,\"$\"),sizes)]][seed]<-list(data.sim$DE.ind)\n    \n      totVar<-NPRSA(SimCounts, colData, \"x\", penalty=2)\n      totVar[which(is.na(totVar))]<-mean(totVar,na.rm=T)\n      otherFrame_List[[grep(paste0(\"^\",size,\"$\"),sizes)]][13,seed]<-roc.curve(scores.class0=totVar[which(data.sim$DE.ind==TRUE)], scores.class1=totVar[which(data.sim$DE.ind==FALSE)])[[2]]\n      otherFrame_List[[grep(paste0(\"^\",size,\"$\"),sizes)]][14,seed]<-pr.curve(scores.class0=totVar[which(data.sim$DE.ind==TRUE)], scores.class1=totVar[which(data.sim$DE.ind==FALSE)])[[2]]\n      NPRSA_Preds[[grep(paste0(\"^\",size,\"$\"),sizes)]][seed]<-list(totVar)\n  \n    library(DESeq2)\n    dds<-DESeqDataSetFromMatrix(countData = SimCounts, colData = colData, design = ~x)\n    dds<-DESeq(dds, test=\"Wald\")\n    res<-results(dds)\n    res<-data.frame(res)\n    res[which(is.na(res$stat)),\"stat\"]<-mean(res$stat, na.rm=T)\n    otherFrame_List[[grep(paste0(\"^\",size,\"$\"),sizes)]][1,seed]<-roc.curve(scores.class0=abs(res$stat[which(data.sim$DE.ind==TRUE)]), scores.class1=abs(res$stat[which(data.sim$DE.ind==FALSE)]))[[2]]\n    otherFrame_List[[grep(paste0(\"^\",size,\"$\"),sizes)]][2,seed]<-pr.curve(scores.class0=abs(res$stat[which(data.sim$DE.ind==TRUE)]), scores.class1=abs(res$stat[which(data.sim$DE.ind==FALSE)]))[[2]]\n    DESeq2_Preds[[grep(paste0(\"^\",size,\"$\"),sizes)]][seed]<-list(res$stat)\n    \n    library(edgeR)\n    y <- DGEList(counts=SimCounts,group=as.factor(colData[,1]))\n    y <- calcNormFactors(y)\n    design <- model.matrix(~as.factor(colData[,1]))\n    y <- estimateDisp(y,design)\n    fit <- glmFit(y,design)\n    lrt <- glmLRT(fit,coef=2)\n    eres<- lrt@.Data\n    eres<-eres[[14]]\n    eres[which(is.na(eres$LR)),\"stat\"]<-mean(eres$LR, na.rm=T)\n    otherFrame_List[[grep(paste0(\"^\",size,\"$\"),sizes)]][3,seed]<-roc.curve(scores.class0=eres$LR[which(data.sim$DE.ind==TRUE)], scores.class1=eres$LR[which(data.sim$DE.ind==FALSE)])[[2]]\n    otherFrame_List[[grep(paste0(\"^\",size,\"$\"),sizes)]][4,seed]<-pr.curve(scores.class0=eres$LR[which(data.sim$DE.ind==TRUE)], scores.class1=eres$LR[which(data.sim$DE.ind==FALSE)])[[2]]\n    EdgeR_Preds[[grep(paste0(\"^\",size,\"$\"),sizes)]][seed]<-list(eres$LR)\n    \n    library(NOISeq)\n    x<-readData(SimCounts, factors=colData)\n    x1<-noiseq(x,replicates=\"biological\", factor=\"x\")\n    x2<-x1@results[[1]]\n    x2[which(is.na(x2$prob)),\"prob\"]<-mean(x2$prob, na.rm=T)\n    otherFrame_List[[grep(paste0(\"^\",size,\"$\"),sizes)]][5,seed]<-roc.curve(scores.class0=x2$prob[which(data.sim$DE.ind==TRUE)], scores.class1=x2$prob[which(data.sim$DE.ind==FALSE)])[[2]]\n    otherFrame_List[[grep(paste0(\"^\",size,\"$\"),sizes)]][6,seed]<-pr.curve(scores.class0=x2$prob[which(data.sim$DE.ind==TRUE)], scores.class1=x2$prob[which(data.sim$DE.ind==FALSE)])[[2]]\n    Noiseq_Preds[[grep(paste0(\"^\",size,\"$\"),sizes)]][seed]<-list(x2$prob)\n    \n    x1<-noiseqbio(x,factor=\"x\")\n    x2<-x1@results[[1]]\n    x2[which(is.na(x2$prob)),\"prob\"]<-mean(x2$prob, na.rm=T)\n    otherFrame_List[[grep(paste0(\"^\",size,\"$\"),sizes)]][7,seed]<-roc.curve(scores.class0=x2$prob[which(data.sim$DE.ind==TRUE&!is.na(x2$prob))], scores.class1=x2$prob[which(data.sim$DE.ind==FALSE&!is.na(x2$prob))])[[2]]\n    otherFrame_List[[grep(paste0(\"^\",size,\"$\"),sizes)]][8,seed]<-pr.curve(scores.class0=x2$prob[which(data.sim$DE.ind==TRUE&!is.na(x2$prob))], scores.class1=x2$prob[which(data.sim$DE.ind==FALSE&!is.na(x2$prob))])[[2]]\n    Bionoiseq_Preds[[grep(paste0(\"^\",size,\"$\"),sizes)]][seed]<-list(x2$prob)\n    \n    source('~/Downloads/LFCseq/R/LFCseqR.R', echo=TRUE)\n    source('~/Downloads/LFCseq/R/LFCseqR_helper.R', echo=TRUE)\n    LFCRes<-LFCseq(SimCounts, colData[,1], norm.method = \"rpm\")\n    otherFrame_List[[grep(paste0(\"^\",size,\"$\"),sizes)]][9,seed]<-roc.curve(scores.class0=-LFCRes[[1]][which(data.sim$DE.ind==TRUE)], scores.class1=-LFCRes[[1]][which(data.sim$DE.ind==FALSE)])[[2]]\n    otherFrame_List[[grep(paste0(\"^\",size,\"$\"),sizes)]][10,seed]<-pr.curve(scores.class0=-LFCRes[[1]][which(data.sim$DE.ind==TRUE)], scores.class1=-LFCRes[[1]][which(data.sim$DE.ind==FALSE)])[[2]]\n    L2FC_Preds[[grep(paste0(\"^\",size,\"$\"),sizes)]][seed]<- list(-LFCRes[[1]])\n      \n    \n      library(samr)\n      SAM<-SAMseq(x=SimCounts, y = colData[,1], resp.type = \"Two class unpaired\", geneid = row.names(SimCounts), fdr.output = 1)\n      SAMsig<-data.frame(rbind(SAM$siggenes.table$genes.up,SAM$siggenes.table$genes.lo))\n      SAMsig$q.value...<-as.numeric(as.character(SAMsig$q.value...))\n      missing<-row.names(SimCounts[which(!row.names(SimCounts)%in%row.names(SAMsig)),])\n      MissingFrame<-data.frame(\"Gene.ID\"=rep(NA,length(missing)), \"Gene.Name\"=rep(NA,length(missing)), \"Score.d.\"=rep(NA,length(missing)), \"Fold.Change\"=rep(NA,length(missing)), \"q.value...\"=rep(mean(SAMsig$q.value...),length(missing)),row.names=row.names(SimCounts[which(!row.names(SimCounts)%in%row.names(SAMsig)),]))\n      row.names(SAMsig)<-SAMsig[,2]\n      SAMsig<-rbind(SAMsig, MissingFrame)\n      SAMsig<-SAMsig[row.names(SimCounts),]\n      otherFrame_List[[grep(paste0(\"^\",size,\"$\"),sizes)]][11,seed]<-roc.curve(scores.class0=-SAMsig$q.value...[which(data.sim$DE.ind==TRUE)], scores.class1=-SAMsig$q.value...[which(data.sim$DE.ind==FALSE)])[[2]]\n      otherFrame_List[[grep(paste0(\"^\",size,\"$\"),sizes)]][12,seed]<-pr.curve(scores.class0=-SAMsig$q.value...[which(data.sim$DE.ind==TRUE)], scores.class1=-SAMsig$q.value...[which(data.sim$DE.ind==FALSE)])[[2]]\n      SAMseq_Preds[[grep(paste0(\"^\",size,\"$\"),sizes)]][seed]<- list(-SAMsig$q.value...)\n    \n  }\n}\n\n#for(size in 1:4){\n#  for(seed in 1:10){\n#    otherFrame_List[[size]][1,seed]<-roc.curve(scores.class0=abs(DESeq2_Preds[[size]][[seed]][which(True_Preds[[size]][[seed]]==TRUE)]), scores.class1=abs(DESeq2_Preds[[size]][[seed]][which(True_Preds[[size]][[seed]]==FALSE)]))[[2]]\n#    otherFrame_List[[size]][2,seed]<-pr.curve(scores.class0=abs(DESeq2_Preds[[size]][[seed]][which(True_Preds[[size]][[seed]]==TRUE)]), scores.class1=abs(DESeq2_Preds[[size]][[seed]][which(True_Preds[[size]][[seed]]==FALSE)]))[[2]]\n#  }\n#}\nPredLists<-list(NPRSA_Preds,\n                DESeq2_Preds,\n                EdgeR_Preds,\n                Noiseq_Preds,\n                Bionoiseq_Preds,\n                L2FC_Preds,\n                SAMseq_Preds,\n                True_Preds)\nsaveRDS(PredLists,file=\"~/Desktop/NPRSA/BRCA_DataSets/BRCA_100sig_crossModelPredLists.RData\")\nsaveRDS(otherFrame_List,file=\"~/Desktop/NPRSA/BRCA_DataSets/BRCA_100sig_crossModelPerf.RData\")\npar(mfrow=c(1,4))\nboxplot(t(otherFrame_List[[1]][c(13,seq(1,12,2)[-5]),]), ylim=c(0.4,0.75),xaxt=\"n\",col=c(\"blue\",\"grey20\", \"darkgreen\",\"purple\",\"orange\",\"pink\"),ylab=\"ROC AUC\",main=\"N=40\")\nboxplot(t(otherFrame_List[[2]][c(13,seq(1,12,2)[-5]),]), ylim=c(0.4,0.75),xaxt=\"n\",col=c(\"blue\",\"grey20\", \"darkgreen\",\"purple\",\"orange\",\"pink\"),ylab=\"ROC AUC\",main=\"N=100\")\nboxplot(t(otherFrame_List[[3]][c(13,seq(1,12,2)[-5]),]), ylim=c(0.4,0.75),xaxt=\"n\",col=c(\"blue\",\"grey20\", \"darkgreen\",\"purple\",\"orange\",\"pink\"),ylab=\"ROC AUC\",main=\"N=200\")\nboxplot(t(otherFrame_List[[4]][c(13,seq(1,12,2)[-5]),]), ylim=c(0.4,0.75),xaxt=\"n\",col=c(\"blue\",\"grey20\", \"darkgreen\",\"purple\",\"orange\",\"pink\"),ylab=\"ROC AUC\",main=\"N=500\")\n\nboxplot(t(otherFrame_List[[1]][c(14,seq(2,12,2)[-5]),]), ylim=c(0,0.13),xaxt=\"n\",col=c(\"blue\",\"grey20\", \"darkgreen\",\"purple\",\"orange\",\"pink\"), ylab=\"PRC AUC\")\nboxplot(t(otherFrame_List[[2]][c(14,seq(2,12,2)[-5]),]), ylim=c(0,0.13),xaxt=\"n\",col=c(\"blue\",\"grey20\", \"darkgreen\",\"purple\",\"orange\",\"pink\"), ylab=\"PRC AUC\")\nboxplot(t(otherFrame_List[[3]][c(14,seq(2,12,2)[-5]),]), ylim=c(0,0.13),xaxt=\"n\",col=c(\"blue\",\"grey20\", \"darkgreen\",\"purple\",\"orange\",\"pink\"), ylab=\"PRC AUC\")\nboxplot(t(otherFrame_List[[4]][c(14,seq(2,12,2)[-5]),]), ylim=c(0,0.13),xaxt=\"n\",col=c(\"blue\",\"grey20\", \"darkgreen\",\"purple\",\"orange\",\"pink\"), ylab=\"PRC AUC\")\n\nTP_counts<-list(c(),c(),c(),c())\nTP_FC<-list(c(),c(),c(),c())\nNPRSA_TP_preds<-list(c(),c(),c(),c())\nDESEQ_TP_preds<-list(c(),c(),c(),c())\nEDGER_TP_preds<-list(c(),c(),c(),c())\nNOISEQ_TP_preds<-list(c(),c(),c(),c())\nBioNOISEQ_TP_preds<-list(c(),c(),c(),c())\nL2FC_TP_preds<-list(c(),c(),c(),c())\nSAM_TP_preds<-list(c(),c(),c(),c())\nfor(size_num in 1:4){\n  print(size_num)\n  for(i in 1:10){\n    currentFrame<-read.table(paste0(\"~/Desktop/NPRSA/BRCA_DataSets/Size_20_seed_\",i,\"_sig_1000.txt\"))\n    TP_counts[[size_num]]<-c(TP_counts[[size_num]],apply(currentFrame[True_Preds[[size_num]][[i]],],1,median))\n    TP_FC[[size_num]]<-c(TP_FC[[size_num]],apply((currentFrame[True_Preds[[size_num]][[i]],1:20]+1)/(currentFrame[True_Preds[[size_num]][[i]],21:40]+1),1,function(x) mean(log10(x))))\n    NPRSA_TP_preds[[size_num]]<-c(NPRSA_TP_preds[[size_num]],NPRSA_Preds[[size_num]][[i]][True_Preds[[size_num]][[i]]])\n    DESEQ_TP_preds[[size_num]]<-c(DESEQ_TP_preds[[size_num]],DESeq2_Preds[[size_num]][[i]][True_Preds[[size_num]][[i]]])\n    EDGER_TP_preds[[size_num]]<-c(EDGER_TP_preds[[size_num]],EdgeR_Preds[[size_num]][[i]][True_Preds[[size_num]][[i]]])\n    NOISEQ_TP_preds[[size_num]]<-c(NOISEQ_TP_preds[[size_num]],Noiseq_Preds[[size_num]][[i]][True_Preds[[size_num]][[i]]])\n    BioNOISEQ_TP_preds[[size_num]]<-c(BioNOISEQ_TP_preds[[size_num]],Bionoiseq_Preds[[size_num]][[i]][True_Preds[[size_num]][[i]]])\n    L2FC_TP_preds[[size_num]]<-c(L2FC_TP_preds[[size_num]],L2FC_Preds[[size_num]][[i]][True_Preds[[size_num]][[i]]])\n    SAM_TP_preds[[size_num]]<-c(SAM_TP_preds[[size_num]],SAMseq_Preds[[size_num]][[i]][True_Preds[[size_num]][[i]]])\n  }\n}\nfor(size_num in 1:4){\nFC_Corrs<-c(cor.test(abs(TP_FC[[size_num]]),abs(DESEQ_TP_preds[[size_num]]),method = \"spearman\")$estimate,\ncor.test(abs(TP_FC[[size_num]]),EDGER_TP_preds[[size_num]],method = \"spearman\")$estimate,\ncor.test(abs(TP_FC[[size_num]]),NOISEQ_TP_preds[[size_num]],method = \"spearman\")$estimate,\ncor.test(abs(TP_FC[[size_num]]),BioNOISEQ_TP_preds[[size_num]],method = \"spearman\")$estimate,\ncor.test(abs(TP_FC[[size_num]]),L2FC_TP_preds[[size_num]],method = \"spearman\")$estimate,\ncor.test(abs(TP_FC[[size_num]]),SAM_TP_preds[[size_num]],method = \"spearman\")$estimate,\ncor.test(abs(TP_FC[[size_num]]),NPRSA_TP_preds[[size_num]],method = \"spearman\")$estimate)\nbarplot(FC_Corrs, main=size_num)\n}\npar(mfrow=c(1,4))\nfor(size_num in 1:4){\nCount_Corrs<-c(cor.test(TP_counts[[size_num]],NPRSA_TP_preds[[size_num]],method = \"spearman\")$estimate,\n               cor.test(TP_counts[[size_num]],abs(DESEQ_TP_preds[[size_num]]),method = \"spearman\")$estimate,\n               cor.test(TP_counts[[size_num]],EDGER_TP_preds[[size_num]],method = \"spearman\")$estimate,\n               cor.test(TP_counts[[size_num]],NOISEQ_TP_preds[[size_num]],method = \"spearman\")$estimate,\n               cor.test(TP_counts[[size_num]],L2FC_TP_preds[[size_num]],method = \"spearman\")$estimate,\n               cor.test(TP_counts[[size_num]],SAM_TP_preds[[size_num]],method = \"spearman\")$estimate)\nbarplot(Count_Corrs,ylim=c(0,0.2),col=c(\"blue\",\"grey20\", \"darkgreen\",\"purple\",\"orange\",\"pink\"),xaxt=\"n\",ylab=\"Test Stat-Expression Level Correlation (rho)\",xlab=\"Analysis Tool\", main=paste0(\"N = \",sizes[size_num]*2))\n}\n\n##################################################\nNPRSA_Times<-c()\nsizes<-c(20,50,100,250,500)\nfor(size in sizes){\n  print(size)\n  NPRSA_Times<-c(NPRSA_Times,system.time(NPRSA_P(BRCAData[,1:(size*2)],colData=data.frame(x=as.factor(c(rep(0,size),rep(1,size))), row.names=colnames(BRCAData[,1:(size*2)])), \"x\"))[3])\n}\n\nNPRSA_Timesx1<-c()\nsizes<-c(20,50,100,250,500)\nfor(size in sizes){\n  print(size)\n  NPRSA_Timesx1<-c(NPRSA_Timesx1,system.time(NPRSA_P(BRCAData[,1:(size*2)],colData=data.frame(x=as.factor(c(rep(0,size),rep(1,size))), row.names=colnames(BRCAData[,1:(size*2)])), \"x\",numCores=1))[3])\n}\n\nrunEDGER<-function(counts, colData){\n  y <- DGEList(counts=counts,group=as.factor(colData[,1]))\n  y <- calcNormFactors(y)\n  design <- model.matrix(~as.factor(colData[,1]))\n  y <- estimateDisp(y,design)\n  fit <- glmFit(y,design)\n  return(glmLRT(fit,coef=2))\n}\nEDGER_Times<-c()\nfor(size in sizes){\n  print(size)\n  colData<-data.frame(x=as.factor(c(rep(0,size),rep(1,size))), row.names=colnames(BRCAData[,1:(size*2)]))\n  EDGER_Times<-c(EDGER_Times,system.time(runEDGER(counts=BRCAData[,1:(size*2)],colData))[3])\n}\n  \nrunNOISEQ<-function(counts, colData){\n  x<-readData(counts, factors=colData)\n  return(noiseq(x,replicates=\"biological\", factor=\"x\"))\n}\nNOISEQ_Times<-c()\nfor(size in sizes){\n  print(size)\n  colData<-data.frame(x=as.factor(c(rep(0,size),rep(1,size))), row.names=colnames(BRCAData[,1:(size*2)]))\n  NOISEQ_Times<-c(NOISEQ_Times,system.time(runNOISEQ(counts=BRCAData[,1:(size*2)],colData))[3])\n}\n\nrunBIONOISEQ<-function(counts, colData){\n  x<-readData(counts, factors=colData)\n  return(noiseqbio(x,factor=\"x\"))\n}\nBIONOISEQ_Times<-c()\nfor(size in sizes){\n  print(size)\n  colData<-data.frame(x=as.factor(c(rep(0,size),rep(1,size))), row.names=colnames(BRCAData[,1:(size*2)]))\n  BIONOISEQ_Times<-c(BIONOISEQ_Times,system.time(runBIONOISEQ(counts=BRCAData[,1:(size*2)],colData))[3])\n}\n\n\nsource('~/Downloads/LFCseq/R/LFCseqR.R', echo=TRUE)\nsource('~/Downloads/LFCseq/R/LFCseqR_helper.R', echo=TRUE)\nrunLFC<-function(counts,colData){\n  return(LFCseq(counts, colData[,1], norm.method = \"rpm\"))\n}\nLFC_Times<-c()\nfor(size in sizes){\n  print(size)\n  colData<-data.frame(x=as.factor(c(rep(0,size),rep(1,size))), row.names=colnames(BRCAData[,1:(size*2)]))\n  LFC_Times<-c(LFC_Times,system.time(runLFC(counts=BRCAData[,1:(size*2)],colData))[3])\n}\n\nrunSAM<-function(counts, colData){\n  return(SAMseq(x=counts, y = colData[,1], resp.type = \"Two class unpaired\", geneid = row.names(counts), fdr.output = 1))\n}\nSAM_Times<-c()\nfor(size in sizes){\n  print(size)\n  colData<-data.frame(x=as.factor(c(rep(0,size),rep(1,size))), row.names=colnames(BRCAData[,1:(size*2)]))\n  SAM_Times<-c(SAM_Times,system.time(runSAM(counts=BRCAData[,1:(size*2)],colData))[3])\n}\n\nrunDESEQ<-function(counts, colData){\n  dds<-DESeqDataSetFromMatrix(countData = counts, colData = colData, design = ~x)\n  dds<-DESeq(dds, test=\"Wald\")\n  return(results(dds))\n}\nDESEQ_Times<-c()\nfor(size in sizes){\n  print(size)\n  colData<-data.frame(x=as.factor(c(rep(0,size),rep(1,size))), row.names=colnames(BRCAData[,1:(size*2)]))\n  DESEQ_Times<-c(DESEQ_Times,system.time(runDESEQ(counts=BRCAData[,1:(size*2)],colData))[3])\n}\nTimeList<-list(NPRSA_Times,NPRSA_Timesx1,EDGER_Times,NOISEQ_Times,BIONOISEQ_Times,LFC_Times,SAM_Times,DESEQ_Times)\nnames(TimeList)<-c(\"NPRSA_Times\",\"NPRSA_Timesx1\",\"EDGER_Times\",\"NOISEQ_Times\",\"BIONOISEQ_Times\",\"LFC_Times\",\"SAM_Times\",\"DESEQ_Times\")\nsaveRDS(TimeList,file=\"~/Desktop/NPRSA/BRCA_DataSets/BRCA_ComputeTime.RData\")\npar(mfrow=c(1,5))\n\nplot(x=c(40,100,200,500,1000),y=log10(TimeList$DESEQ_Times),type=\"o\",pch=16,ylim=c(0,5.2),ylab=\"Compute Time (log10 seconds)\",xlim=c(0,1000),xaxt=\"n\",xlab=\"Sample Size\")\naxis(1,at =c(40,100,200,500,1000))\npoints(c(40,100,200,500,1000), log10(TimeList$NPRSA_Times), type=\"o\",pch=16,col=\"blue\")\npoints(c(40,100,200,500,1000), log10(TimeList$NPRSA_Timesx1), type=\"o\",pch=16,col=\"red\")\npoints(c(40,100,200,500,1000), log10(TimeList$EDGER_Times), type=\"o\",pch=16,col=\"darkgreen\")\npoints(c(40,100,200,500,1000), log10(TimeList$NOISEQ_Times), type=\"o\",pch=16,col=\"purple\")\npoints(c(40,100,200,500,1000), log10(TimeList$LFC_Times), type=\"o\",pch=16,col=\"orange\")\npoints(c(40), log10(TimeList$SAM_Times), type=\"o\",pch=16,col=\"pink\")\nlegend(\"topleft\",legend = c(\"RBDE 1 core\",\"RBDE 4 cores\", \"DESeq2\",\"EdgeR\",\"L2FC\",\"NOISeq\", \"SAM-seq\"),\n       col=c(\"red\",\"blue\",\"black\",\"darkgreen\",\"orange\",\"purple\",\"pink\"),pch=16,cex=0.8)\n\n##################################################\nsize=20\nNPRSA_Dist_Stats<-list()\nNPRSA_Ps<-list()\nDESEQ_Dist_Stats<-list()\nDESEQ_Ps<-list()\nEDGER_Dist_Stats<-list()\nEDGER_Ps<-list()\nNOISEQ_Dist_Stats<-list()\nNOISEQ_Ps<-list()\nBIONOISEQ_Dist_Stats<-list()\nBIONOISEQ_Ps<-list()\nLFC_Dist_Stats<-list()\nLFC_Ps<-list()\nSAM_Dist_Stats<-list()\nSAM_Ps<-list()\n\nfor(seed in 1:10){\n  print(seed)\n  set.seed(seed)\n  data.sim <- SimData(counts = BRCAData, treatment = BRCAtreatment,\n                      sort.method = \"unpaired\", k.ind = size, n.genes = 5000, n.diff = 0)\n  SimCounts<-data.sim$counts\n  colData<-data.frame(x=as.factor(c(rep(0,size),rep(1,size))), row.names=colnames(SimCounts))\n  res<-NPRSA_P(SimCounts,colData=data.frame(x=as.factor(c(rep(0,size),rep(1,size))), row.names=colnames(SimCounts)), \"x\")\n  NPRSA_Dist_Stats[[seed]]<-chisq.unif.test(res[,2])$statistic\n  NPRSA_Ps[[seed]]<-sum(res[,2]<=0.05,na.rm=T)/sum(!is.na(res[,2]))\n  \n  dds<-DESeqDataSetFromMatrix(countData = SimCounts, colData = colData, design = ~x)\n  dds<-DESeq(dds, test=\"Wald\")\n  res<-results(dds)\n  res<-data.frame(res)\n  DESEQ_Dist_Stats[[seed]]<-chisq.unif.test(res$pvalue)$statistic\n  DESEQ_Ps[[seed]]<-sum(res$pvalue<=0.05,na.rm=T)/sum(!is.na(res$pvalue))\n  \n  y <- DGEList(counts=SimCounts,group=as.factor(colData[,1]))\n  y <- calcNormFactors(y)\n  design <- model.matrix(~as.factor(colData[,1]))\n  y <- estimateDisp(y,design)\n  fit <- glmFit(y,design)\n  lrt <- glmLRT(fit,coef=2)\n  eres<- lrt@.Data\n  res<-eres[[14]]\n  EDGER_Dist_Stats[[seed]]<-chisq.unif.test(res$PValue)$statistic\n  EDGER_Ps[[seed]]<-sum(res$PValue<=0.05,na.rm=T)/sum(!is.na(res$PValue))\n  \n  x<-readData(SimCounts, factors=colData)\n  x1<-noiseq(x,replicates=\"biological\", factor=\"x\")\n  res<-x1@results[[1]]\n  NOISEQ_Dist_Stats[[seed]]<-chisq.unif.test(res$prob)$statistic\n  NOISEQ_Ps[[seed]]<-sum(res$prob<=0.05,na.rm=T)/sum(!is.na(res$prob))\n  \n  x1<-noiseqbio(x,factor=\"x\")\n  res<-x1@results[[1]]\n  BIONOISEQ_Dist_Stats[[seed]]<-chisq.unif.test(res$prob)$statistic\n  BIONOISEQ_Ps[[seed]]<-sum(res$prob<=0.05,na.rm=T)/sum(!is.na(res$prob))\n  \n  LFCRes<-LFCseq(SimCounts, colData[,1], norm.method = \"rpm\")\n  res<-LFCRes[[1]]\n  LFC_Dist_Stats[[seed]]<-chisq.unif.test(res)$statistic\n  LFC_Ps[[seed]]<-sum(res<=0.05,na.rm=T)/sum(!is.na(res))\n  \n  SAM<-SAMseq(x=SimCounts, y = colData[,1], resp.type = \"Two class unpaired\", geneid = row.names(SimCounts), fdr.output = 1)\n  SAMsig<-data.frame(rbind(SAM$siggenes.table$genes.up,SAM$siggenes.table$genes.lo))\n  SAMsig$q.value...<-as.numeric(as.character(SAMsig$q.value...))\n  missing<-row.names(SimCounts[which(!row.names(SimCounts)%in%row.names(SAMsig)),])\n  MissingFrame<-data.frame(\"Gene.ID\"=rep(NA,length(missing)), \"Gene.Name\"=rep(NA,length(missing)), \"Score.d.\"=rep(NA,length(missing)), \"Fold.Change\"=rep(NA,length(missing)), \"q.value...\"=rep(mean(SAMsig$q.value...),length(missing)),row.names=row.names(SimCounts[which(!row.names(SimCounts)%in%row.names(SAMsig)),]))\n  row.names(SAMsig)<-SAMsig[,2]\n  SAMsig<-rbind(SAMsig, MissingFrame)\n  SAMsig<-SAMsig[row.names(SimCounts),]\n  SAM_Dist_Stats[[seed]]<-chisq.unif.test(SAMsig[,5]/100)$statistic\n  SAM_Ps[[seed]]<-sum(SAMsig[,5]/100<=0.05,na.rm=T)/sum(!is.na(SAMsig[,5]/100))\n}\nDistStats_List<-list(unlist(NPRSA_Dist_Stats),\n                     unlist(DESEQ_Dist_Stats),\n                     unlist(EDGER_Dist_Stats),\n                     unlist(NOISEQ_Dist_Stats),\n                     unlist(BIONOISEQ_Dist_Stats),\n                     unlist(LFC_Dist_Stats),\n                     unlist(SAM_Dist_Stats))\nsaveRDS(DistStats_List, file=\"~/Desktop/NPRSA/BRCA_DataSets/BRCA_NullChiDistStats.RData\")\nboxplot(DistStats_List[-5],las=2,col=c(\"blue\",\"grey20\", \"darkgreen\",\"purple\",\"orange\",\"pink\"),ylab=\"P-value non-uniformity (chi-square statistic)\",\n        names=c(\"RBDA\",\"DESeq2\",\"EdgeR\",\"NOIseq\",\"L2FC\",\"SAMseq\"))\n\nPs_List<-list(unlist(NPRSA_Ps),\n                     unlist(DESEQ_Ps),\n                     unlist(EDGER_Ps),\n                     unlist(NOISEQ_Ps),\n                     unlist(BIONOISEQ_Ps),\n                     unlist(LFC_Ps),\n                     unlist(SAM_Ps))\nsaveRDS(Ps_List, file=\"~/Desktop/NPRSA/BRCA_DataSets/BRCA_NullPs.RData\")\nboxplot(Ps_List[-5],las=2,col=c(\"blue\",\"grey20\", \"darkgreen\",\"purple\",\"orange\",\"pink\"),ylab=\"Fraction of P-values <0.05\",\n        names=c(\"RBDA\",\"DESeq2\",\"EdgeR\",\"NOIseq\",\"L2FC\",\"SAMseq\"))\nabline(h=0.05,col=\"red\",lty=2)\nlibrary(data.table)\nGTEx_info<-read.table(\"~/Downloads/GTEx_Analysis_v8_Annotations_SampleAttributesDS.txt\",sep=\"\\t\",quote=\"\",fill=T,header=T,stringsAsFactors = F)\nWholeBlood_info<-GTEx_info[which(GTEx_info[,7]==\"Whole Blood\"&GTEx_info[,17]==\"RNASEQ\"),]\nBlood_Count_Cols<-c(1,2,which(colnames(GTEx_Counts)%in%WholeBlood_info[,1]))\nGTEx_Counts<-fread(\"~/Downloads/GTEx_Analysis_2017-06-05_v8_RNASeQCv1.1.9_gene_reads.gct\",stringsAsFactors = F,sep = \"\\t\",select = Blood_Count_Cols)\nGTEx_Counts<-data.frame(GTEx_Counts)\nGTEx_Counts<-data.frame(GTEx_Counts[,-c(1:2)],row.names = GTEx_Counts[,1])\nTPMs<-t(t(GTEx_Counts)/(colSums(GTEx_Counts)/1000000))\nTPMs<-apply(TPMs, 1, median)\nGTEx_Counts<-GTEx_Counts[-(which(TPMs==0)),]\ncountRanks<-apply(GTEx_Counts, 2, function(x) rank(-x, ties.method = \"random\"))\ncountRanks<-apply(countRanks,2,as.numeric)\ncor(countRanks[,1],countRanks[,2], method = \"spearman\")\nx<-mclapply(1:100,function(y) apply(countRanks,2, function(x) cor(countRanks[,y],x)),mc.cores = 4)\nx<-unlist(x)\nx<-x[which(x!=1)]\nhist(x, xlim=c(0,1),xlab=\"spearman rho\",main=\"\", col = \"grey\")\nVar<-apply(countRanks,1,function(x) sum(abs(x-mean(x))^2))\nplot(apply(countRanks, 1, median),Var, ylab=\"Gene Rank Variance\", xlab=\"Median Expression Rank\")\nplot(countRanks[,1],countRanks[,2],xlab=\"Sample 1 Expression Rank\", ylab=\"Sample 2 Expression Rank\")\n\nN1_res_100<-list()\nset.seed(1990)\ngeneSamp<-sample(row.names(GTEx_Counts),100)\nfor(gene in geneSamp){\n  print(grep(gene,geneSamp))\n  countData<-GTEx_Counts\n  set.seed(grep(gene,geneSamp))\n  Samp_N1<-sample(1:755,1)\n  countData<-cbind(countData[,-Samp_N1],countData[,Samp_N1])\n  countData[gene,755]<-round(countData[gene,755]*0,digits=0)\n  res<-NPRSA_P(countData,colData=data.frame(x=as.factor(c(rep(0,754),rep(1,1))), row.names=colnames(countData)), testVariable = \"x\",minP = 0.0005)\n  N1_res_100[[gene]]<-c(res[gene,],rank(res[,2],ties.method = \"max\")[grep(gene,row.names(res))])\n}\nN1_Res_100Frame<-do.call(rbind,N1_res_100)\n\nN1_res_90<-list()\nset.seed(1990)\ngeneSamp<-sample(row.names(GTEx_Counts),100)\nfor(gene in geneSamp){\n  print(grep(gene,geneSamp))\n  countData<-GTEx_Counts\n  set.seed(grep(gene,geneSamp))\n  Samp_N1<-sample(1:755,1)\n  countData<-cbind(countData[,-Samp_N1],countData[,Samp_N1])\n  countData[gene,755]<-round(countData[gene,755]*0.1,digits=0)\n  res<-NPRSA_P(countData,colData=data.frame(x=as.factor(c(rep(0,754),rep(1,1))), row.names=colnames(countData)), testVariable = \"x\",minP = 0.0005)\n  N1_res_90[[gene]]<-c(res[gene,],rank(res[,2],ties.method = \"max\")[grep(gene,row.names(res))])\n}\nN1_res_90Frame<-do.call(rbind,N1_res_90)\n\nN1_res_50<-list()\nset.seed(1990)\ngeneSamp<-sample(row.names(GTEx_Counts),100)\nfor(gene in geneSamp){\n  print(grep(gene,geneSamp))\n  countData<-GTEx_Counts\n  set.seed(grep(gene,geneSamp))\n  Samp_N1<-sample(1:755,1)\n  countData<-cbind(countData[,-Samp_N1],countData[,Samp_N1])\n  countData[gene,755]<-round(countData[gene,755]*0.5,digits=0)\n  res<-NPRSA_P(countData,colData=data.frame(x=as.factor(c(rep(0,754),rep(1,1))), row.names=colnames(countData)), testVariable = \"x\",minP = 0.0005)\n  N1_res_50[[gene]]<-c(res[gene,],rank(res[,2],ties.method = \"max\")[grep(gene,row.names(res))])\n}\nN1_Res_50Frame<-do.call(rbind,N1_res_50)\n\npar(mfrow=c(1,3))\nplot(log10(TPMs[row.names(N1_Res_100Frame)]+1),-log10(N1_Res_100Frame[,3]+0.000001),ylab=\"-log10 P-value\",xlab=\"log10 Test Gene Expression (CPM)\",main=\"100% Knock Down\",pch=16)\nabline(h=-log10(0.05),lty=2,col=\"red\")\nplot(log10(TPMs[row.names(N1_res_90Frame)]+1),-log10(N1_res_90Frame[,3]+0.000001),ylab=\"-log10 P-value\",xlab=\"log10 Test Gene Expression (CPM)\",main=\"90% Knock Down\",pch=16)\nabline(h=-log10(0.05),lty=2,col=\"red\")\nplot(log10(TPMs[row.names(N1_Res_50Frame)]+1),-log10(N1_Res_50Frame[,3]+0.000001),ylab=\"-log10 P-value\",xlab=\"log10 Test Gene Expression (CPM)\",main=\"50% Knock Down\",pch=16)\nabline(h=-log10(0.05),lty=2,col=\"red\")\n\n\n\n########\nDDID_Genes<-read.table(\"~/Downloads/DDID_Genes.txt\",sep=\"\\t\")\nTrioFrame_R<-read.table(\"~/Downloads/RNA_libraries.txt.SharedGeneCounts.txt\",sep=\"\\t\",header=T,row.names=1)\na<-rep(0,15)\n#a[grep(\"117.C\",colnames(TrioFrame_R))]<-1\nb<-rep(0,15)\nb[grep(\"00117.\",colnames(TrioFrame_R))]<-1\ncolData<-data.frame(x=as.factor(a), y=as.factor(b), row.names=colnames(TrioFrame_R))\nTrio_TPMs<-apply(TrioFrame_R, 1, median)\nTrioFrame_R<-TrioFrame_R[which(Trio_TPMs>0),]\n#117\nres_117_R<-NPRSA_P(countData = TrioFrame_R,colData,testVariable = \"x\",batch_family_variable = \"y\", randomSeed = 1990)\ncol=rep(\"black\",nrow(TrioFrame_R))\ncol[(gsub(\"_.+$\",\"\",row.names(TrioFrame_R))%in%DDID_Genes[,1])]<-\"red\"\nplot(log10(Trio_TPMs[row.names(res_117_R)]+1),log10(res_117_R[,2]),pch=16,col=col, ylab=\"log10 Test Statistic\", xlab=\"log10 Expression Level (FPKM)\",xlim=c(0,3.5))\nlegend(\"topright\",legend=c(\"DDID associated\", \"other\"),col=c(\"red\",\"black\"), pch=16)\n\n#118\na<-rep(0,15)\na[grep(\"118.C\",colnames(TrioFrame_R))]<-1\nb<-rep(0,15)\nb[grep(\"118.\",colnames(TrioFrame_R))]<-1\ncolData<-data.frame(x=as.factor(a), y=as.factor(b), row.names=colnames(TrioFrame_R))\nres_118<-NPRSA_P(countData = TrioFrame_R,colData,testVariable = \"x\",batch_family_variable = \"y\", randomSeed = 1990)\nplot(log10(Trio_TPMs[row.names(res_118)]+1),res_118[,2],pch=16,col=col, ylab=\"log10 Test Statistic\", xlab=\"log10 Expression Level (FPKM)\")\nplot(log10(Trio_TPMs[row.names(res_118)]+1),-log10(res_118[,3]),pch=16,col=col, ylab=\"log10 Test Statistic\", xlab=\"log10 Expression Level (FPKM)\",xlim=c(0,3.5))\nlegend(\"topright\",legend=c(\"DDID associated\", \"other\"),col=c(\"red\",\"black\"), pch=16)\n\n#27\na<-rep(0,15)\na[grep(\"27.C\",colnames(TrioFrame_R))]<-1\nb<-rep(0,15)\nb[grep(\"27.\",colnames(TrioFrame_R))]<-1\ncolData<-data.frame(x=as.factor(a), y=as.factor(b), row.names=colnames(TrioFrame_R))\nres_27<-NPRSA_P(countData = TrioFrame_R,colData,testVariable = \"x\",batch_family_variable = \"y\", randomSeed = 199)\nplot(log10(Trio_TPMs[row.names(res_27)]+1),res_27[,2],pch=16,col=col, ylab=\"Test Statistic\", xlab=\"log10 Expression Level (CPM)\")\nplot(log10(Trio_TPMs[row.names(res_27)]+1),-log10(res_27[,3]),pch=16,col=col, ylab=\"log10 Test Statistic\", xlab=\"log10 Expression Level (FPKM)\",xlim=c(0,3.5))\nSPAT<-t(TrioFrame_R[\"C21orf56_ENSG00000160284.10\",]/(colSums(TrioFrame_R)/1000000))\nLMNA<-t(TrioFrame_R[\"LMNA_ENSG00000160789.14\",]/(colSums(TrioFrame_R)/1000000))\nbarplot(SPAT[order(SPAT)], col=ifelse(colData[order(SPAT),2]==1,\"red\",\"black\"),las=2, ylab=\"SPATC1L Expression (CPM)\")\nbarplot(LMNA[order(LMNA)], col=ifelse(colData[order(LMNA),1]==1,\"blue\",ifelse(colData[order(LMNA),2]==1,\"red\",\"black\")),las=2, ylab=\"LMNA Expression (CPM)\")\n\n#135\na<-rep(0,15)\na[grep(\"135.C\",colnames(TrioFrame_R))]<-1\nb<-rep(0,15)\nb[grep(\"135.\",colnames(TrioFrame_R))]<-1\ncolData<-data.frame(x=as.factor(a), y=as.factor(b), row.names=colnames(TrioFrame_R))\nres_135<-NPRSA_P(countData = TrioFrame_R,colData,testVariable = \"x\",batch_family_variable = \"y\", randomSeed = 1990)\nplot(log10(Trio_TPMs[row.names(res_135)]+1),res_135[,2],pch=16,col=\"black\", ylab=\"Test Statistic\", xlab=\"log10 Expression Level (CPM)\")\nplot(log10(Trio_TPMs[row.names(res_135)]+1),-log10(res_135[,3]),pch=16,col=col, ylab=\"log10 Test Statistic\", xlab=\"log10 Expression Level (FPKM)\")\nbarplot(t(TrioFrame_R[\"CSF3R_ENSG00000119535.13\",c(10:12,1:9,13:15)])[,1]/(colSums(TrioFrame_R)/1000000),xaxt=\"n\")\nbarplot((t(GTEx_Counts[\"ENSG00000119535\",])[,1]/(colSums(GTEx_Counts)/1000000))[order(t(GTEx_Counts[\"ENSG00000119535\",])[,1]/(colSums(GTEx_Counts)/1000000))],xaxt=\"n\")\n\n#143\na<-rep(0,15)\na[grep(\"143.C\",colnames(TrioFrame_R))]<-1\nb<-rep(0,15)\nb[grep(\"143.\",colnames(TrioFrame_R))]<-1\ncolData<-data.frame(x=as.factor(a), y=as.factor(b), row.names=colnames(TrioFrame_R))\nres_143<-NPRSA_P(countData = TrioFrame_R,colData,testVariable = \"x\",batch_family_variable = \"y\", randomSeed = 1990)\nplot(log10(Trio_TPMs[row.names(res_143)]+1),res_143[,2],pch=16,col=col, ylab=\"log10 Test Statistic\", xlab=\"log10 Expression Level (FPKM)\")\nplot(log10(Trio_TPMs[row.names(res_135)]+1),-log10(res_135[,3]),pch=16,col=col, ylab=\"log10 Test Statistic\", xlab=\"log10 Expression Level (FPKM)\")\n\n",
    "created" : 1569855926165.000,
    "dirty" : true,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "955718291",
    "id" : "9A0DA84D",
    "lastKnownWriteTime" : 1569851364,
    "path" : "~/Desktop/NPRSA/NPRSA_3.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "type" : "r_source"
}